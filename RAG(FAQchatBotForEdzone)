{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11238427,"sourceType":"datasetVersion","datasetId":7021117}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import gradio as gr\nimport requests\nimport json\n\n# API configuration\nAPI_URL = \"MYAPIURL\"\nAPI_KEY = \"\"   # Replace with your actual API key\n\n# Function to handle the API call\ndef chatbot(query):\n    try:\n        # Prepare the payload\n        payload = {\n            \"payload\": query,\n            \"env\": \"prod\"\n        }\n        \n        # Set headers\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Apikey\": f\"Api-Key {API_KEY}\"\n        }\n        \n        # Make the POST request\n        response = requests.post(API_URL, headers=headers, data=json.dumps(payload))\n        \n        # Check if the request was successful\n        if response.status_code == 200:\n            # Parse the JSON response\n            result = response.json()\n            # Extract the 'text' field from the response\n            return result.get(\"text\", \"Success! But no specific response provided.\")\n        else:\n            return f\"Error: API returned status code {response.status_code}\"\n    \n    except Exception as e:\n        return f\"Error: Something went wrong - {str(e)}\"\n\n# Create Gradio interface\ninterface = gr.Interface(\n    fn=chatbot,\n    inputs=gr.Textbox(lines=2, placeholder=\"How may we help you today?\"),\n    outputs=\"text\",\n    title=\"EdZone Customer Support Chatbot\",\n    description=\"Ask about UK higher studies, IELTS prep, or anything else!\",\n    theme=\"default\"\n)\n\n# Launch the interface\ninterface.launch()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-01T10:23:04.228542Z","iopub.execute_input":"2025-04-01T10:23:04.228894Z","iopub.status.idle":"2025-04-01T10:23:05.274006Z","shell.execute_reply.started":"2025-04-01T10:23:04.228869Z","shell.execute_reply":"2025-04-01T10:23:05.273168Z"}},"outputs":[{"name":"stdout","text":"* Running on local URL:  http://127.0.0.1:7863\nKaggle notebooks require sharing enabled. Setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n\n* Running on public URL: https://bf6f86b7497003b36b.gradio.live\n\nThis share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div><iframe src=\"https://bf6f86b7497003b36b.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"},"metadata":{}},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":""},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}